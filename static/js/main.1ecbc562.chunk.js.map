{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Footer","Layout","Header","Sider","Content","App","ghost","title","href","extra","theme","mode","Item","icon","FileTextFilled","key","LinkedinFilled","target","rel","GithubOutlined","FundFilled","style","padding","margin","className","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAMgBA,G,OAA2BC,IAAnCC,OAAmCD,IAA3BD,QAAQG,EAAmBF,IAAnBE,MAAOC,EAAYH,IAAZG,QAmChBC,MAjCf,WACE,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CACEC,OAAO,EACPC,MAAO,uBAAGC,KAAK,KAAR,qBAEPC,MAAO,CACL,kBAAC,IAAD,CAAMC,MAAM,QAAQC,KAAK,cACvB,kBAAC,IAAKC,KAAN,CAAWC,KAAM,kBAACC,EAAA,EAAD,MAAoBC,IAAI,KAAzC,QACA,kBAAC,IAAKH,KAAN,CAAWC,KAAM,kBAACG,EAAA,EAAD,MAAoBD,IAAI,KAAI,uBAAGP,KAAK,+CAA+CS,OAAO,SAASC,IAAI,uBAA3E,aAC7C,kBAAC,IAAKN,KAAN,CAAWC,KAAM,kBAACM,EAAA,EAAD,MAAoBJ,IAAI,KAAI,uBAAGP,KAAK,+BAA+BS,OAAO,SAASC,IAAI,uBAA3D,WAC7C,kBAAC,IAAKN,KAAN,CAAWC,KAAM,kBAACO,EAAA,EAAD,MAAgBL,IAAI,KAAI,uBAAGP,KAAK,KAAR,eAI/C,kBAAC,IAAD,KACE,kBAACL,EAAD,qBACA,kBAACC,EAAD,CAASiB,MAAO,CAAEC,QAAS,WAC3B,kBAAC,IAAD,CAAYD,MAAO,CAAEE,OAAQ,WAC3B,kBAAC,IAAWX,KAAZ,aACA,kBAAC,IAAWA,KAAZ,aACA,kBAAC,IAAWA,KAAZ,gBAEF,yBAAKY,UAAU,uBAAf,YAEA,kBAACrB,EAAD,uBAEF,kBAACH,EAAD,CAAQqB,MAAO,CAAEI,UAAW,WAA5B,0DCxBgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1ecbc562.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { Layout, Menu, Breadcrumb, PageHeader } from 'antd';\r\nimport { GithubOutlined, LinkedinFilled, HomeFilled, FundFilled, FileTextFilled } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n    <PageHeader\r\n      ghost={false}\r\n      title={<a href=\"#\">darraghmurphy.dev</a>}\r\n      // subTitle=\"This is a subtitle\"\r\n      extra={[\r\n        <Menu theme=\"light\" mode=\"horizontal\">\r\n          <Menu.Item icon={<FileTextFilled />} key=\"1\">Blog</Menu.Item>\r\n          <Menu.Item icon={<LinkedinFilled />} key=\"2\"><a href=\"https://www.linkedin.com/in/darraghmurphycs/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></Menu.Item>\r\n          <Menu.Item icon={<GithubOutlined />} key=\"3\"><a href=\"https://github.com/dazmurphy\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a></Menu.Item>\r\n          <Menu.Item icon={<FundFilled />} key=\"4\"><a href=\"#\" >Stocks</a></Menu.Item>\r\n        </Menu>,\r\n      ]}\r\n    ></PageHeader>\r\n    <Layout>\r\n      <Sider>left sidebar</Sider>\r\n      <Content style={{ padding: '0 50px' }}>\r\n      <Breadcrumb style={{ margin: '16px 0' }}>\r\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Blog</Breadcrumb.Item>\r\n        <Breadcrumb.Item>Post_1</Breadcrumb.Item>\r\n      </Breadcrumb>\r\n      <div className=\"site-layout-content\">Content</div>\r\n    </Content>\r\n      <Sider>right sidebar</Sider>\r\n    </Layout>\r\n    <Footer style={{ textAlign: 'center' }}>darraghmurphy.dev Â©2020 Created by Darragh Murphy</Footer>\r\n  </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}